syntax = "proto3";

package proto;

option java_package = "my.company";
option java_outer_classname = "PartnerProtos";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/gogo/googleapis/google/api/annotations.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options/annotations.proto";
import "github.com/gogo/googleapis/google/rpc/status.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "My API";
		version: "1.0";
		contact: {
			name: "me";
			url: "https://github.com/senexi/go-proto-micro";
			email: "none@example.com";
		};
		license: {
			name: "Apache 2";
			url: "https://github.com/senexi/go-proto-micro/blob/master/LICENSE";
		};
	};
    responses: {
		key: "400";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
            schema: {
				json_schema: {
					ref: ".google.rpc.Status";
				}
			}
        }
    },
    responses: {
		key: "401";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
            schema: {
				json_schema: {
					ref: ".google.rpc.Status";
				}
			}
        }
    },
    responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
            schema: {
				json_schema: {
					ref: ".google.rpc.Status";
				}
			}
        }
    },
    responses: {
		key: "404";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
            schema: {
				json_schema: {
					ref: ".google.rpc.Status";
				}
			}
        }
    },
    responses: {
		key: "500";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
            schema: {
				json_schema: {
					ref: ".google.rpc.Status";
				}
			}
        }
    },
};

message Partner {
  string name = 1 [(gogoproto.jsontag) = "name", (gogoproto.moretags) = "pg:\",notnull\""];
  int32 id = 2;
  string email = 3;
  google.rpc.Status sss = 5;

  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber {
    string number = 1;
    PhoneType type = 2;
  }

  repeated PhoneNumber phone = 4;
}

message PartnerList {
  repeated Partner partners = 1;
}

message AddPartnerReply {
  string message = 1;
}

message SearchRequest {
  string search_string = 1;
}

service PartnerService {
    rpc AddPartner (Partner) returns (AddPartnerReply) {};
    rpc GetPartners (SearchRequest) returns (PartnerList) {
        option (google.api.http) = {
            get: "/partners"
        };
    };
    rpc SearchPartner (SearchRequest) returns (PartnerList) {};
}


